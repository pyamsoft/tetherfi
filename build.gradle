/*
 * Copyright 2025 pyamsoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  ext {
    // SDK
    minSdk = 24
    targetSdk = 36
    compileSdk = 36

    // Kotlin
    kotlin = "2.2.10"
    coroutines = "1.10.2"

    // Us
    pydroid = "29.1.2"

    // Square
    leakCanary = "2.14"
    timber = "5.0.1"

    // Compose
    compose = "1.9.0"
    composeMaterial3 = "1.3.2"
    composeActivity = "1.10.1"

    // AndroidX
    core = "1.17.0"
    preferences = "1.2.1"
    appCompat = "1.7.1"
    lifecycle = "2.9.3"
    dataStore = "1.1.7"

    // Coil
    coil = "3.3.0"

    // QR code
    qrCode = "4.5.0"

    // KTOR
    ktor = "3.2.3-PYAMSOFT"

    // Build and Sugar
    dagger = "2.57.1"
    desugar = "2.1.5"

    // Testing
    testRunner = "1.7.0"
  }
}

plugins {
  // Android AGP
  // https://developer.android.com/studio/build#top-level
  id("com.android.library") version '8.13.0' apply false

  // Fix Android build cache
  // https://github.com/gradle/android-cache-fix-gradle-plugin
  id("org.gradle.android.cache-fix") version "3.0.1" apply false

  // Kotlin
  // https://developer.android.com/studio/build#top-level
  id("org.jetbrains.kotlin.android") version "${kotlin}" apply false

  // Jetpack Compose Compiler
  // https://android-developers.googleblog.com/2024/04/jetpack-compose-compiler-moving-to-kotlin-repository.html
  id("org.jetbrains.kotlin.plugin.compose") version "${kotlin}" apply false

  // Gradle version checker
  // https://github.com/ben-manes/gradle-versions-plugin
  id("com.github.ben-manes.versions") version "0.52.0" apply false

  // Version Filter Plugin
  // https://github.com/janderssonse/gradle-versions-filter-plugin
  id("se.ascp.gradle.gradle-versions-filter") version "0.1.16" apply false

  // Spotless
  // https://github.com/diffplug/spotless
  id("com.diffplug.spotless") version "7.2.1" apply false

  // KSP
  // https://github.com/google/ksp
  id("com.google.devtools.ksp") version "${kotlin}-2.0.2" apply false

  // Gradle Doctor
  // https://runningcode.github.io/gradle-doctor/
  id("com.osacky.doctor") version "0.12.1" apply true
}

allprojects {
  apply plugin: "com.diffplug.spotless"
  apply plugin: "com.github.ben-manes.versions"
  apply plugin: "se.ascp.gradle.gradle-versions-filter"

  repositories {
    mavenLocal()
    gradlePluginPortal()
    google()
    mavenCentral()

    // Jitpack
    maven {
      setUrl("https://jitpack.io")
      content {
        includeGroup("com.github.pyamsoft.pydroid")
        includeGroup("com.github.pyamsoft")
      }
    }
  }

  // Java compile show
  tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("-Xlint:unchecked")
    options.compilerArgs.add("-Xlint:deprecation")
    options.deprecation = true
  }

  // Spotless plugin
  spotless {
    java {
      target("src/**/*.java")

      removeUnusedImports()
      trimTrailingWhitespace()
      endWithNewline()
      leadingTabsToSpaces(2)
    }
    kotlin {
      target("src/**/*.kt", "*.kts")
      ktfmt()

      trimTrailingWhitespace()
      endWithNewline()
      leadingTabsToSpaces(2)
    }
    kotlinGradle {
      target("*.gradle.kts")
      ktfmt()

      trimTrailingWhitespace()
      endWithNewline()
      leadingTabsToSpaces(2)
    }
    groovyGradle {
      target("*.gradle")
      greclipse()

      trimTrailingWhitespace()
      endWithNewline()
      leadingTabsToSpaces(2)
    }
  }
}
